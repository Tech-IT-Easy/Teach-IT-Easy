
==============================================================================
./tests/example/my_func.lua
==============================================================================
 2	local my_print = require "tests.example.my_print"
 2	local my_func = {}
  	
 2	function my_func.plus(a, b)
 5		res = my_print.printer(a, b)
 5		return res
  	end
 2	return my_func

==============================================================================
./tests/example/my_print.lua
==============================================================================
  	--
  	-- Created by IntelliJ IDEA.
  	-- User: jonathan
  	-- Date: 2015-09-22
  	-- Time: 15:43
  	-- To change this template use File | Settings | File Templates.
  	--
 1	local my_print = {}
  	
 1	function my_print.printer(a, b)
  	    --print("a+b: ", tostring(a+b))
 4	    if a < 0 then
 1	        a = a * -1
  	    else
 3	        a = a * 1
  	    end
 4	    if b < 0 then
 2	        b = b * -1
  	    else
 2	        b = b * 1
  	    end
 4	    return a+b
  	end
  	
 1	return my_print
  	
  	

==============================================================================
./tests/example/player_movements.lua
==============================================================================
  	--
  	-- Created by IntelliJ IDEA.
  	-- User: jonathan
  	-- Date: 2015-09-22
  	-- Time: 13:06
  	-- To change this template use File | Settings | File Templates.
  	--
 1	love = require "love"
 1	P = {}
  	
 2	function P.movePlayerLeft(player, dt)
*0	    if player.x > 0 then
*0	        player.x = player.x - (player.speed*dt)
  	    end
  	end
  	
 2	function P.movePlayerRight(player, dt)
*0	    if player.x < (love.graphics.getWidth() - player.img:getWidth()) then
*0	        player.x = player.x + (player.speed*dt)
  	    end
  	end
  	
 2	function P.movePlayerUp(player, dt)
 1	    if player.y > (love.graphics.getHeight() / 2) then
 1	        player.y = player.y - (player.speed*dt)
  	    end
  	end
  	
 2	function P.movePlayerDown(player, dt)
*0	    if player.y < (love.graphics.getHeight() - 55) then
*0	        player.y = player.y + (player.speed*dt)
  	    end
  	end
  	
 1	return P

==============================================================================
./tests/my_folder/init.lua
==============================================================================
 1	require "tests.my_folder.test_file"

==============================================================================
./tests/my_folder/test_file.lua
==============================================================================
 1	lunit = require "lunit"
 1	module( "test_my_folder_my_file", package.seeall, lunit.testcase )
  	
  	
 1	function test_success()
 1	  assert_false( false, "This test never fails.")
  	end
  	
  	--
  	--function test_failure()
  	--  fail( "This test always fails!" )
  	--end
  	--
  	

==============================================================================
./tests/test.lua
==============================================================================
 1	lunit = require "lunit"
  	
 1	module( "simple_example", package.seeall, lunit.testcase )
  	
 1	function test_success()
 1	  assert_true( true, "This test never fails.")
  	end
  	--
  	--function test_failure()
  	--  assert_true( "Hello World!", "This test always fails!")
  	--end
  	--
  	
 1	local foobar = nil
  	
 1	function setup()
 3	  foobar = "Hello World"
  	end
  	
 1	function teardown()
 3	  foobar = nil
  	end
  	
 1	function test1()
 1	  assert_equal("Hello World", foobar)
 1	  foobar = string.sub(foobar, 1, 5)
 1	  assert_equal("Hello", foobar)
  	end
  	
 1	function test2()
 1	  assert_equal("Hello World", foobar)
 1	  foobar = string.sub(foobar, -5)
 1	  assert_equal("World", foobar)
  	end

==============================================================================
./tests/test_my_func.lua
==============================================================================
  	
 1	lunit = require "lunit"
 1	my_func = require "tests.example.my_func"
  	
 1	module( "test_my_func", package.seeall, lunit.testcase )
  	
  	
  	
 1	function test_plus_positive_integers()
 1	  res = my_func.plus(1,3)
  	
 1	  assert_equal(4, res, "Message if the test fails.")
  	end
  	
 1	function test_plus_negative_integers()
 1	  res = my_func.plus(-1,-3)
  	
 1	  assert_equal(4, res, "Message if the test fails.")
  	end
  	
 1	function test_plus_one_negative_one_positive_integer()
 1	  res = my_func.plus(1,-3)
  	
 1	  assert_equal(4, res, "Message if the test fails.")
  	end

==============================================================================
./tests/test_my_print.lua
==============================================================================
  	--
  	-- Created by IntelliJ IDEA.
  	-- User: johannaskolling
  	-- Date: 15-09-23
  	-- Time: 15:52
  	-- To change this template use File | Settings | File Templates.
  	--
  	
 1	lunit = require "lunit" -- Import Package,
  	
  	
 1	module( "test_my_print", package.seeall, lunit.testcase ) -- Name of the test, must be unique.
 1	my_print = require "tests.example.my_print" -- import the file to be tested.
  	
 1	function test_printer_first() -- one test function. Must begin or end with test
 1	    res = my_print.printer(1, 2) -- Result of the test. printer = function that is tested. (1,2) inputs to the printer function. res = result of the function printer in my_print.
 1	    assert_equal(3, res, "Not correct") -- TEST 3 = expected result, res - result from function, "Not Correct" - Error message if failed.
  	end
  	
  	-- To assure that the test will be run on the server the test must be writtin in init.lua.

==============================================================================
./tests/test_player_movements.lua
==============================================================================
  	--
  	-- Created by IntelliJ IDEA.
  	-- User: jonathan
  	-- Date: 2015-09-24
  	-- Time: 01:26
  	-- To change this template use File | Settings | File Templates.
  	--
  	
 1	lunit = require "lunit"
  	
 1	module( "test_player_movements", package.seeall, lunit.testcase )
  	
 1	function setup() -- This in run before the tests
 1	    local lemock = require 'lemock' -- needed to be able to make a mock
 1	    mc = lemock.controller() -- same here
 1	    local getHeight = mc:mock() -- function you want imitate.
 1	    package.loaded.love = nil -- need to shut down the package where the function is taken from.
 1	    package.preload['love'] = function () -- Create preload. When the program wants to include love. This function will run instead
 1	        local love = {} -- empty table. To make sure it looks the same as in the test program.
 1	        local graphics = {} -- empty table
 1	        love.graphics = graphics -- assignment.
 1	        love.graphics.getHeight = getHeight -- Adds the getHeight function to the table
 1	        return love
  	    end
  	
 1	    getHeight(mc.ANYARGS) ;mc :returns(15) :anytimes() -- Tells what should be return. With what Inputs. This particular will return 15. mc.ANYARGS => will do this no matter what input. 15 = will return this. anytimes = How many times.
  	
 1	    mc:close() --
 1	    mc:replay() -- Tells "now we start testing the code"
 1	    package.loaded.player_movements = nil -- want this file.
 1	    package.loaded.love = nil -- want this file
 1	    love = require "love" -- makes sure we uses the love package created in this file.
 1	    player_movements = require "tests.example.player_movements" -- Test this file.
  	
  	end
  	
 1	function teardown()-- This is run AFTER the tests
  	
 1	    mc:verify() -- makes sure you have run enought times
 1	    package.loaded.love = nil -- Remove read created package.
 1	    package.preload['love'] = nil -- Removes created package.
  	end
  	
  	
 1	function test_movePlayerUp() -- The actual test.
  	
 1	    local player = {y=10, speed=5} -- Wants a player, decied what speed you want to test with.
 1	    player_movements.movePlayerUp(player,3) -- 3 = dt from file. Choose one that you can caluculate using the actual player_movements file.
 1	    assert_equal(-5, player.y, "Message if the test fails.") --(Expected, restulat, failmessage)
  	
  	end
  	
  	

==============================================================================
tests/init.lua
==============================================================================
*0	require "luacov"
 1	require "tests.test_lemock"
 1	require "tests.test"
 1	require "tests.test_my_func"
 1	require "tests.test_my_print"
 1	require "tests.my_folder"
 1	require "tests.test_player_movements"
  	

==============================================================================
Summary
==============================================================================

6	0	100.00%	./tests/example/my_func.lua
10	0	100.00%	./tests/example/my_print.lua
9	6	60.00%	./tests/example/player_movements.lua
1	0	100.00%	./tests/my_folder/init.lua
4	0	100.00%	./tests/my_folder/test_file.lua
17	0	100.00%	./tests/test.lua
12	0	100.00%	./tests/test_my_func.lua
6	0	100.00%	./tests/test_my_print.lua
28	0	100.00%	./tests/test_player_movements.lua
6	1	85.71%	tests/init.lua
------------------------
99	7	93.40%	
