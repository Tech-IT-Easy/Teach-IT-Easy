
==============================================================================
./my_folder/my_file.lua
==============================================================================
  	--
  	-- Created by IntelliJ IDEA.
  	-- User: jonathan
  	-- Date: 2015-10-01
  	-- Time: 16:30
  	-- To change this template use File | Settings | File Templates.
  	--
  	
 6	local my_file = {}
  	
 6	function my_file.addition_of_positive_numbers(a, b)
 5	    if a < 0 then
 2	        a = a * -1
  	    else
 3	        a = a * 1
  	    end
 5	    if b < 0 then
 2	        b = b * -1
  	    else
 3	        b = b * 1
  	    end
 5	    return a+b
  	end
  	
  	
 6	function my_file.movePlayerUp(player, dt)
 1	    if player.y > (love.graphics.getHeight() / 2) then
 1	        player.y = player.y - (player.speed*dt)
  	    end
  	end
  	
 6	return my_file
  	
  	
  	
  	

==============================================================================
./tests/my_folder/init.lua
==============================================================================
 1	require "tests.my_folder.test_my_file"

==============================================================================
./tests/my_folder/test_my_file.lua
==============================================================================
 1	lunit = require "lunit" -- import lunit framework
 1	module( "my_folder_my_file", package.seeall, lunit.testcase ) -- Name of the test, must be unique.
  	
 1	function setup() -- This will be runned for every test.
 6	  local lemock = require 'lemock' -- needed to be able to make a mock
 6	  mc = lemock.controller() -- same here
 6	  local getHeight = mc:mock() -- function you want imitate.
 6	  package.loaded.love = nil -- need to delete the package where the function is taken from.
 6	  package.preload['love'] = function () -- Create preload. When the program wants to include love. This function will run instead
 6	    local love = {} -- empty table. To make sure it looks the same as in the test program.
 6	    local graphics = {} -- empty table
 6	    love.graphics = graphics -- assignment.
 6	    love.graphics.getHeight = getHeight -- Adds the getHeight function to the table
 6	    return love
  	  end
  	  -- If you import a package in a package and just want to mock a part off it, ex love.graphics nad not the whole love, you could unload a part of it using
  	  -- package.loaded['love.graphics'] = nil
  	  -- package.preload['love.graphics'] = function () -- Create preload. When the program wants to include love. This function will run instead
  	  --   local graphics = {} -- empty table. To make sure it looks the same as in the test program.
  	  --   graphics.getHeight = getHeight -- Adds the getHeight function to the table
  	  --   return graphics
  	  -- end
  	
 6	  getHeight(mc.ANYARGS) ;mc :returns(15) :anytimes() -- Tells what should be return. With what Inputs. This particular will return 15. mc.ANYARGS => will do this no matter what input. 15 = will return this. anytimes = How many times.
 6	  mc:close() --
 6	  mc:replay() -- Tells "now we start testing the code"
 6	  package.loaded["my_folder.my_file"] = nil -- want this file.
 6	  _G.love = require "love" -- makes sure we uses the love package created in this file and that it is globaly accesable
 6	  my_file = require "my_folder.my_file"
  	end
  	
 1	function teardown()-- This is run AFTER the tests
  	
 6	  mc:verify() -- makes sure you have run enought times
 6	  package.loaded.love = nil -- Remove read created package.
 6	  package.preload['love'] = nil -- Removes created package.
  	
  	end
  	
  	
 1	function test_movePlayerUp() -- The actual test.
 1	    local player = {y=10, speed=5} -- Wants a player, decied what speed you want to test with.
 1	    my_file.movePlayerUp(player,3) -- 3 = dt from file. Choose one that you can caluculate using the actual player_movements file.
 1	    assert_equal(-5, player.y, "Message if the test fails.") --(Expected, restulat, failmessage)
  	
  	end
  	
  	
 1	function test_addition_of_positive_numbers_with_positive_integers()  -- one test function. Must begin or end with test
 1	  local res = my_file.addition_of_positive_numbers(1,2) -- Result of the test. addition_of_positive_numbers = function that is tested. (1,2) inputs to the addition_of_positive_numbers function. res = result of the function addition_of_positive_numbers in my_folder.my_file
  	
 1	  assert_equal(3, res, "Message if the test fails.") -- TEST 3 = expected result, res - result from function, "Message if the test fails." - Error message if failed.
  	end
  	
 1	function test_addition_of_positive_numbers_with_negative_integers()
  	  -- Description of test if needed
 1	  local res = my_file.addition_of_positive_numbers(-1,-3)
  	
 1	  assert_equal(4, res, "Message if the test fails.")
  	end
  	
 1	function test_addition_of_positive_numbers_with_one_negative_one_positive_integer()
 1	  local res = my_file.addition_of_positive_numbers(-2,3)
  	
 1	  assert_equal(5, res, "Message if the test fails.")
  	end
  	
 1	function test_addition_of_positive_numbers_with_one_positive_one_negative_integer()
 1	  local res = my_file.addition_of_positive_numbers(3,-3)
 1	  assert_equal(6, res, "Message if the test fails.")
  	end
  	
 1	function test_addition_of_positive_numbers_with_both_zero()
 1	  local res = my_file.addition_of_positive_numbers(0,0)
 1	  assert_equal(0, res, "Message if the test fails.")
  	end
  	
  	-- To assure that the test will be run on the server the test must be writtin in init.lua.

==============================================================================
tests/init.lua
==============================================================================
*0	require "luacov"
 1	require "tests.my_folder"

==============================================================================
Summary
==============================================================================

13	0	100.00%	./my_folder/my_file.lua
1	0	100.00%	./tests/my_folder/init.lua
42	0	100.00%	./tests/my_folder/test_my_file.lua
1	1	50.00%	tests/init.lua
------------------------
57	1	98.28%	
